buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://maven.architectury.dev/" }
        maven { url = "https://maven.minecraftforge.net/" }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    // Tell forge to include your libraries in the classpath
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}


println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'watermedia'
            arg '--mixin.config'
            arg 'watermedia.mixin.json'

            mods {
                watermedia {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'watermedia'
            arg '--mixin.config'
            arg 'watermedia.mixin.json'

            mods {
                watermedia {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcV}-${project.fgV}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // FABRIC LOADER
    implementation "net.fabricmc:fabric-loader:0.14.19"

    library 'com.github.sealedtx:java-youtube-downloader:3.2.3'
    library 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
//    library ('com.github.walkyst:lavaplayer-fork:1.4.1') {
//        exclude group: 'org.slf4j', module: 'slf4j-api'
//    }
//    library 'com.github.aikaterna:lavaplayer-natives:original-SNAPSHOT'
    library 'com.mpatric:mp3agic:0.9.1'
}

shadowJar {
    configurations = [project.configurations.library]

    // Add relocation rules for each dependency
    relocate 'com.github.sealedtx', 'me.lib720.sealedtx'
    relocate 'com.github.walkyst', 'me.lib720.walkyst'
    relocate 'com.github.aikaterna', 'me.lib720.aikaterna'
    relocate 'com.mpatric', 'me.lib720.mpatric'
    relocate 'org.mozilla', 'me.lib720.mozilla'
    relocate 'com.fasterxml.jackson', 'me.lib720.jackson'

    archiveFileName = "${project.archivesBaseName}-${project.version}.jar"
}

// Make the reobfJar task depend on shadowJar
tasks.build.dependsOn shadowJar

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : project.author,
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from {
        configurations.library.collect {
            it.isDirectory() ? it.matching {
                exclude '*', 'META-INF/**'
            } : zipTree(it).matching {
                exclude '*', 'META-INF/**'
            }
        }
    }
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar // Replace 'jar' with 'shadowJar'
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}