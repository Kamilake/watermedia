import groovy.json.JsonOutput
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.google.osdetector' version '1.7.3'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.+'
}

/* JAR INFO */
version = modversion
group = modgroup
base { archivesName = "${modid}" }

/* JAVA CONFIG */
java {
    withSourcesJar()
    withJavadocJar()

    /* SOURCE AND TARGET JAVA VERSION */
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourcesJar {
    exclude("videolan/**.zip")
    exclude("videolan/**.7z")
}

println "Gradle Java: ${JavaVersion.current()}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

/* PROJECT REPOSITORIES */
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
}

configurations {
    shadow.extendsFrom(implementation)
}

dependencies {
    // FabricLoader (just to give loading support on FABRIC)
    compileOnly("net.fabricmc:fabric-loader:${project.fabricv}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // LIBRARIES TO BE SHADOW
    shadow ('com.github.sealedtx:java-youtube-downloader:3.2.3')
    // THIS FREAKING DEP CARRIES 'CODEC', 'LANG3' AND 'COMMONS-IO'
    shadow ('org.apache.commons:commons-compress:1.26.1') {
//        exclude group: 'org.apache.commons', module: 'commons-lang3'
//        exclude group: 'commons-io', module: 'commons-io'
    }
    shadow ('org.tukaani:xz:1.9')
    shadow project(":lib-vlcj")

    // DEPENDENCIES INCLUDED IN MINECRAFT
    compileOnly 'net.java.dev.jna:jna:4.4.0'
    compileOnly 'net.java.dev.jna:platform:3.4.0'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.15.0'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.1'
    compileOnly 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'commons-io:commons-io:2.7'
    compileOnly 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.lwjgl:lwjgl-opengl:3.2.2'
    compileOnly 'org.lwjgl:lwjgl-openal:3.1.1'
    compileOnly 'org.ow2.asm:asm-tree:9.1'
    compileOnly(project(":lib-forge")) // MOCKED FORGE CLASSES - REMOVED ON JAR

    // TEST
    testImplementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation 'commons-io:commons-io:2.7'
    testImplementation 'com.google.code.gson:gson:2.10.1'
    testImplementation 'org.lwjgl:lwjgl:3.2.2'
    testImplementation 'org.lwjgl:lwjgl-opengl:3.2.2'
    testImplementation 'org.lwjgl:lwjgl-openal:3.1.1'
    testImplementation 'org.lwjgl:lwjgl-glfw:3.2.2'
    testImplementation 'net.java.dev.jna:jna:4.4.0'
    testImplementation 'net.java.dev.jna:platform:3.4.0'

    testRuntimeOnly("org.lwjgl:lwjgl:3.2.2:natives-$osdetector.os")
    testRuntimeOnly("org.lwjgl:lwjgl-opengl:3.2.2:natives-$osdetector.os")
    testRuntimeOnly("org.lwjgl:lwjgl-glfw:3.2.2:natives-$osdetector.os")
}

// Process target resources with mod info
processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json', "watermedia/version.cfg"]) {
        def combinedMap = [:]
        combinedMap.putAll(rootProject.properties)
        combinedMap.putAll([
                modauthorlist: JsonOutput.toJson(modauthor.trim().replaceAll(" ", "").split(","))
        ])

        expand(combinedMap)
    }
}

// ShadowJar task (run this task to make a built JAR.
shadowJar {
    configurations = [project.configurations.shadow]

    // Add relocation rules for each dependency
    relocate 'com.github', 'me.lib720'
    relocate 'com.alibaba', 'me.lib720.alibaba'
    relocate 'com.fasterxml', 'me.lib720'
    relocate 'org.apache.commons', 'me.lib720.apache'
    relocate 'org.tukaani', 'me.lib720.tukaani'

    exclude "META-INF/versions/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/LICENSE.*"
    exclude "META-INF/LICENSE"
    exclude "META-INF/NOTICE.**"
    exclude "META-INF/NOTICE"

    mergeServiceFiles()
    archiveClassifier = ""
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}
tasks.processResources.outputs.upToDateWhen { false }

// DO NOT RUN
jar {
    duplicatesStrategy = DuplicatesStrategy.WARN

    manifest {
        attributes([
                "Specification-Title"       : modname,
                "Specification-Vendor"      : modauthor,
                "Specification-Version"     : modversion,
                "Implementation-Title"      : modname,
                "Implementation-Version"    : modversion,
                "Implementation-Vendor"     : modauthor,
                "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy "shadowJar"
}

task upload(type: GradleBuild) {
    description 'Uploads new version to modrinth and curseforge.'
    group = 'publishing'
    tasks = [ 'curseforge', 'modrinth']
}

task curseforge(type: TaskPublishCurseForge) {
    disableVersionDetection()

    apiToken = System.getenv("CURSEFORGE_TOKEN") != null ? System.getenv("CURSEFORGE_TOKEN") : "empty"

    // MAIN FILE
    def mainFile = upload(curseforgeid, jar)
    mainFile.displayName = modnamebig + "/" + modversion
    mainFile.changelog = getChangelogText(false)
    mainFile.changelogType = "markdown"
    mainFile.addModLoader("Forge")
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion("1.16.5", "1.18.2", "1.19.2", "1.20.1", "client")
    mainFile.addIncompatibility("fancyvideo-api")
    mainFile.releaseType = modversiontype
}

tasks.modrinth.enabled = System.getenv("MODRINTH_TOKEN") != null
tasks.modrinth.group = 'publishing'
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    versionName = modnamebig + "/" + modversion
    projectId = modrinthid
    versionNumber = mcversion + "-" + modversion
    versionType = versiontype
    uploadFile = jar
    gameVersions = [ "1.16.5", "1.18.2", "1.19.2", "1.20.1" ]
    changelog = getChangelogText(true)
    loaders = [ "forge", "neoforge" ]
}

String getChangelogText(boolean latest) {
    String result = ''
    List<String> lines = file('CHANGELOG.md').readLines('UTF-8')

    for (String line: lines) {
        if (latest && line.isEmpty()) {
            return result
        }

        result += line + "\n"
    }
    return result
}