plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

/* JAR INFO */
version = modversion
group = modgroup
archivesBaseName = modid

/* SOURCE AND TARGET JAVA VERSION */
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

println "Gradle Java: ${JavaVersion.current()}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mappingsch}", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        client {
            taskName "MClient-${mcversion}"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', modid

            arg '--mixin.config'
            arg 'watermedia.mixin.json'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

/* SET GENERATED RESOURCES */
sourceSets.main.resources { srcDir 'src/generated/resources' }

/* PROJECT REPOSITORIES */
repositories {
    mavenCentral()
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url 'https://jitpack.io' }
}

/* CONFIGURATION TO SHADOW DEPENDENCIES - */
configurations {
    library
    implementation.extendsFrom library
}

/* TELLS FORGE TO IDENTIFY LIBRARY CLASSES  */
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcversion}-${project.fgversion}"
//    compileOnly 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // FabricLoader (just to give loading support on FABRIC)
    compileOnly "net.fabricmc:fabric-loader:${project.fabricv}"

    // TODO: Implement LavaPlayer and all dependencies
    // library 'com.github.aikaterna:lavaplayer-natives:original-SNAPSHOT'
    // library ('com.github.walkyst:lavaplayer-fork:1.4.2') {
    //     exclude group: 'org.slf4j', module: 'slf4j-api'
    // }

    // LIBRARIES TO BE SHADOW
    library 'com.github.sealedtx:java-youtube-downloader:3.2.3'
    library 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    library ('com.squareup.retrofit2:retrofit:2.6.4')
    library ('com.squareup.retrofit2:converter-gson:2.9.0') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    library 'com.mpatric:mp3agic:0.9.1'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json', "mcmod.info"]
def replaceProperties = [
        minecraft_version: mcversion, minecraft_version_range: mcrange,
        forge_version: fgversion, forge_version_range: fgrange,
        loader_version_range: fgrange,
        mod_id: modid, mod_name: modname, mod_license: modlicense, mod_version: modversion,
        mod_authors: modauthor, mod_description: mod_description
]

// Process target resources with mod info
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

mixin { add sourceSets.main, "watermedia.mixin-refmap.json" }

// ShadowJar task (run this task to make a built JAR.
shadowJar {
    configurations = [project.configurations.library]

    // Add relocation rules for each dependency
    relocate 'com.github', 'me.lib720.github'
    relocate 'com.alibaba', 'me.lib720.alibaba'
    relocate 'com.mpatric', 'me.lib720.mpatric'
    relocate 'org.mozilla', 'me.lib720.mozilla'
    relocate 'okhttp3', 'me.lib720.okhttp3'
    relocate 'okio', 'me.lib720.okio'
    relocate 'com.fasterxml', 'me.lib720'
    relocate 'retrofit2', 'me.lib720.retrofit2'
//    relocate 'org.slf4j', 'me.lib720'

    mergeServiceFiles()
    archiveFileName = "${project.modid}-${project.modversion}.jar"
}

// Make the reobfJar task depend on shadowJar
tasks.build.dependsOn shadowJar

// DO NOT RUN
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modname,
                "Specification-Vendor"    : project.modauthor,
                "Specification-Version"   : project.modversion,
                "Implementation-Title"    : project.modname,
                "Implementation-Version"  : project.modversion,
                "Implementation-Vendor"   : project.modauthor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "watermedia.mixin.json"
        ])
    }
    from {
        configurations.library.collect {
            it.isDirectory() ? it.matching {
                exclude '*', 'META-INF/**'
            } : zipTree(it).matching {
                exclude '*', 'META-INF/**'
            }
        }
    }
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}